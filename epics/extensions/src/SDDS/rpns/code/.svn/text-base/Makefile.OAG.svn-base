#*************************************************************************
# Copyright (c) 2002 The University of Chicago, as Operator of Argonne
# National Laboratory.
# Copyright (c) 2002 The Regents of the University of California, as
# Operator of Los Alamos National Laboratory.
# This file is distributed subject to a Software License Agreement found
# in the file LICENSE that is included with this distribution. 
#*************************************************************************

CMPLR = ANSI

#RATIONAL = purify
#RATIONAL = quantify
#RATIONAL = purecov
ifdef RATIONAL
HOST_OPT = NO
CC := $(RATIONAL) -best-effort $(CC)
CCC := $(RATIONAL) -best-effort $(CCC)
endif

ifeq ($(OS_CLASS),solaris)
ACC_DEP_CFLAGS += -KPIC -v
CCC_DEP_CFLAGS += -KPIC -v
GCC_DEP_CFLAGS += -D__EXTENSIONS__
endif

ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
PROD = rpn rpnl if2pf
else
PROD_HOST = rpn rpnl if2pf
endif

USR_CFLAGS = -I../../../include

LIBRARY = rpnlib

LIBSRCS = array.c \
        conditional.c \
        execute.c \
        get_token_rpn.c \
        infixtopostfix.c \
        logical.c \
        math.c \
        memory.c \
        pcode.c \
        pop_push.c \
        prompt.c \
        rpn_csh.c \
        rpn_data.c \
        rpn_draw.c \
        rpn_error.c \
        rpn_io.c \
        rpn_sub.c \
        stack.c \
        udf.c

rpn_sub_CFLAGS = -DEXPORT_RPNLIB
array_CFLAGS = -DEXPORT_RPNLIB
conditional_CFLAGS = -DEXPORT_RPNLIB
execute_CFLAGS = -DEXPORT_RPNLIB
get_token_rpn_CFLAGS = -DEXPORT_RPNLIB
logical_CFLAGS = -DEXPORT_RPNLIB
math_CFLAGS = -DEXPORT_RPNLIB
memory_CFLAGS = -DEXPORT_RPNLIB
pcode_CFLAGS = -DEXPORT_RPNLIB
pop_push_CFLAGS = -DEXPORT_RPNLIB
prompt_CFLAGS = -DEXPORT_RPNLIB
stack_CFLAGS = -DEXPORT_RPNLIB
udf_CFLAGS = -DEXPORT_RPNLIB
rpn_io_CFLAGS = -DEXPORT_RPNLIB
rpn_csh_CFLAGS = -DEXPORT_RPNLIB
rpn_draw_CFLAGS = -DEXPORT_RPNLIB
rpn_error_CFLAGS = -DEXPORT_RPNLIB
rpn_data_CFLAGS = -DEXPORT_RPNLIB
infixtopostfix_CFLAGS = -DEXPORT_RPNLIB

#Look for private version of GSL used here at APS
GSL = $(words $(wildcard ../../../gsl))
ifeq ($(GSL), 1)
USR_CFLAGS += -I../../../gsl -DUSE_GSL
GSLLIB = gsl gslcblas
SYS_GSLLIB = 
GSL_DIR = $(INSTALL_LIB)
GSLCBLAS_DIR = $(INSTALL_LIB)
else

#Look for system version of GSL
SYSGSL = $(words $(notdir $(wildcard \
/usr/lib/libgsl.a \
/usr/lib/libgsl.so \
/usr/lib64/libgsl.a \
/usr/lib64/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.a \
/usr/lib/x86_64-linux-gnu/libgsl.so \
/usr/lib/x86_64-linux-gnu/libgsl.a \
/lib/i386-linux-gnu/libgsl.so \
/lib/i386-linux-gnu/libgsl.a \
/lib/x86_64-linux-gnu/libgsl.so \
/lib/x86_64-linux-gnu/libgsl.a \
/lib/libgsl.a \
/lib/libgsl.so \
/lib64/libgsl.a \
/lib64/libgsl.so \
/sw/lib/libgsl.a \
/sw/lib/libgsl.dylib \
/opt/local/lib/libgsl.a \
/opt/local/lib/libgsl.dylib \
/usr/sfw/lib/libgsl.a \
/usr/sfw/lib/libgsl.so )))

ifneq ($(SYSGSL), 0)
USR_CFLAGS += -DUSE_GSL
GSLLIB = 
SYS_GSLLIB = gsl gslcblas
else

#No GSL library found. Build without it.
GSLLIB = 
SYS_GSLLIB = 
endif
endif



ifdef WIN32
PROD_LIBS += rpnlib mdbmth mdblib fdlibm $(GSLLIB)
DLL_LIBS += mdbmth mdblib fdlibm $(GSLLIB)
else
PROD_LIBS = rpnlib
USR_LIBS = mdbmth mdblib $(GSLLIB)
SYS_PROD_LIBS_DEFAULT = z $(SYS_GSLLIB)
SYS_PROD_LIBS_Linux = z $(SYS_GSLLIB)
SYS_PROD_LIBS_solaris = z $(SYS_GSLLIB)
endif

mdblib_DIR = $(INSTALL_LIB)
mdbmth_DIR = $(INSTALL_LIB)
fdlibm_DIR = $(INSTALL_LIB)
rpnlib_DIR = .
