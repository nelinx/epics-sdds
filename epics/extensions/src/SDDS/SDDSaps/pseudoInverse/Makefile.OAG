#*************************************************************************
# Copyright (c) 2002 The University of Chicago, as Operator of Argonne
# National Laboratory.
# Copyright (c) 2002 The Regents of the University of California, as
# Operator of Los Alamos National Laboratory.
# This file is distributed subject to a Software License Agreement found
# in the file LICENSE that is included with this distribution. 
#*************************************************************************

CMPLR = ANSI

#RATIONAL = purify
#RATIONAL = quantify
#RATIONAL = purecov
ifdef RATIONAL
HOST_OPT = NO
CC := $(RATIONAL) -best-effort $(CC)
CCC := $(RATIONAL) -best-effort $(CCC)
endif

SHARED_LIBRARIES=NO

ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
PROD = sddspseudoinverse sddsmatrixop
else
PROD_HOST = sddspseudoinverse sddsmatrixop
endif

# Choices of linear algebra packages
# MESCHACH              free, distributed in package, and compilation default.
# NUMERICAL_RECIPES     needs copyrighted svd_nr.c (not for distribution)
# SUNPERF               runs only on solaris. Need license.
# CLAPACK               free, LAPACK that uses ATLAS. 
#                       This flag should be changed to ATLAS in the future
#                       here and in sddspseudoinverse to avoid confusion
#                       as we no longer use the general lapack translated to C.
#                       ATLAS does provide some functions of type clapack_<...>
# LAPACK                free, plain LAPACK found on linux systems with no
#                       optimization.
#for sddsmatrixop, only CLPACK, LAPACK and oag own matrix library (no flag)
#are avaible, all other flags are ignored.

MESCHACH = ../../meschach

# MESCHACH header file is required for the matrix type definition
USR_CFLAGS += 	-I../../../include -I../../../lzma -I$(MESCHACH) -DzLib

sddspseudoinverse_SRCS = sddspseudoinverse.c
sddsmatrixop_SRCS = matrix.c sddsmatrixop.c

ifeq ($(EPICS_HOST_ARCH),solaris-sparc)
DALIGN=1
endif
ifeq ($(HOST_ARCH),solaris)
DALIGN=1
endif
ifeq ($(EPICS_HOST_ARCH),linux-x86)
MALIGN=1
endif
ifeq ($(HOST_ARCH),Linux)
ifneq ($(EPICS_HOST_ARCH),linux-x86_64)
MALIGN=1
endif
endif

ifdef DALIGN
USR_CFLAGS += -dalign
endif
ifdef MALIGN
USR_CFLAGS += -malign-double
endif


ifeq ($(OS_CLASS),solaris)
ACC_OPT_YES = -fast
CCC_OPT_YES = -fast
endif


ifdef WIN32
CLAPACK = $(words $(notdir $(wildcard c:/CLAPACK/include/clapack.h)))
endif

ifeq ($(EPICS_HOST_ARCH),linux-x86_64)
CLAPACK_FOUND = $(words $(wildcard $(CLAPACK_LIB)))
ifneq ($(CLAPACK_FOUND), 0)
CLAPACK = 1
else
LAPACK = 1
endif
endif

ifeq ($(EPICS_HOST_ARCH),linux-x86)
CLAPACK_FOUND = $(words $(wildcard $(CLAPACK_LIB)))
ifneq ($(CLAPACK_FOUND), 0)
CLAPACK = 1
else
LAPACK = 1
endif
endif

ifeq ($(OS_CLASS),Darwin)
CLAPACK = 1
endif

# For benchmarking purposes, use the four MACRO assignment lines
# to force a particular SVD method explicitly.  Because of the
# structure of the following "ifneq" statements the first one that has a
# value of 1 will be used. If none are set, then meschach, the default,
# is used.
#SUNPERF = 1
#NUMERICAL_RECIPES = 1
#CLAPACK = 1
#LAPACK = 1

ifndef NUMERICAL_RECIPES 
NUMERICAL_RECIPES = 0
endif
ifndef CLAPACK
CLAPACK = 0
endif
ifndef LAPACK
LAPACK = 0
endif
ifndef SUNPERF
SUNPERF = 0
endif

# for four choices:
#ifneq
#else
#  ifneq
#  else
#    ifneq
#    else
#      ifneq
#      else
#      endif
#    endif
#  endif
#endif
# section on numercial recipes
ifneq ($(NUMERICAL_RECIPES), 0)
  USR_CFLAGS += -DNUMERICAL_RECIPES
  sddspseudoinverse_SRCS += nr_svd.c
  sddsmatrixop_SRCS += nr_svd.c
else
  # section on CLAPACK
  ifneq ($(CLAPACK), 0)
    ifdef WIN32
      # there's a CLAPACK_INCLUDE defined?
      USR_CPPFLAGS += -DCLAPACK -DF2C -I$(CLAPACK_INCLUDE)
      USR_LDFLAGS += /nodefaultlib:libcmt $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/clapack.lib $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/BLAS.lib $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/libf2c.lib
#      USR_LDFLAGS += $(CLAPACK_LIB)/lapack.lib
    else
        ifeq ($(OS_CLASS),solaris)
          # One can choose threaded ptcblas ptf77blas or unthreaded cblas f77blas
          USR_CPPFLAGS += -DCLAPACK -DF2C -I$(CLAPACK_INCLUDE) -I$(ATLAS_INCLUDE)
          USR_LIBS += lapack cblaswr cblas atlas F77 I77 
        else
          ifeq ($(OS_CLASS),Darwin)
           USR_CPPFLAGS += -DCLAPACK
           USR_LDFLAGS += -framework Accelerate
          else
            # One can choose threaded ptcblas ptf77blas or unthreaded cblas f77blas
            USR_CPPFLAGS += -DCLAPACK  -I$(ATLAS_INCLUDE)
            USR_LIBS += lapack ptcblas ptf77blas  atlas 
            OP_SYS_LDLIBS += -lgfortran
          endif
        endif
    endif
  else 
    # section on LAPACK
    ifneq ($(LAPACK), 0)
      ifdef WIN32
        USR_CPPFLAGS += -DLAPACK -I$(LAPACK_INCLUDE)
        USR_LIBS += lapack
      else
        # there is no lapack header file
	OP_SYS_LDLIBS += -llapack -lblas -lgfortran
        USR_CPPFLAGS += -DLAPACK 
      endif
    else
      # SUNPERF choice is placed last since it may be set to 1
      # because of the existence of the library.
      ifneq ($(SUNPERF), 0)
        USR_CPPFLAGS += -DSUNPERF
        OP_SYS_LDLIBS += -xlic_lib=sunperf -lsunperf
        OP_SYS_LDFLAGS = $(COMPILER_LDFLAGS) -z combreloc -z lazyload
      endif
    endif
  endif
endif

# if LAPACK macro is set, then the lapack lib is found in the 
# standard /usr/lib
ifneq ($(CLAPACK), 0)
ifeq ($(OS_CLASS),solaris)
lapack_DIR = $(CLAPACK_LIB)
cblaswr_DIR = $(CLAPACK_LIB)
else
lapack_DIR = $(ATLAS_LIB)
endif
endif

clapack_DIR = $(CLAPACK_LIB)

#pthread_DIR = /usr/lib
cblas_DIR = $(ATLAS_LIB)
ptcblas_DIR = $(ATLAS_LIB)
f77blas_DIR = $(ATLAS_LIB)
ptf77blas_DIR = $(ATLAS_LIB)
atlas_DIR = $(ATLAS_LIB)
F77_DIR = $(F2C_LIB)
I77_DIR = $(F2C_LIB)

ifeq ($(OS_CLASS),solaris)
ACC_DEP_CFLAGS += -KPIC -v
CCC_DEP_CFLAGS += -KPIC -v
GCC_DEP_CFLAGS += -D__EXTENSIONS__
endif


#Look for private version of GSL used here at APS
GSL = $(words $(wildcard ../../../gsl))
ifeq ($(GSL), 1)
GSLLIB = gsl gslcblas
SYS_GSLLIB = 
GSL_DIR = $(INSTALL_LIB)
GSLCBLAS_DIR = $(INSTALL_LIB)
else

#Look for system version of GSL
SYSGSL = $(words $(notdir $(wildcard \
/usr/lib/libgsl.a \
/usr/lib/libgsl.so \
/usr/lib64/libgsl.a \
/usr/lib64/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.a \
/usr/lib/x86_64-linux-gnu/libgsl.so \
/usr/lib/x86_64-linux-gnu/libgsl.a \
/lib/i386-linux-gnu/libgsl.so \
/lib/i386-linux-gnu/libgsl.a \
/lib/x86_64-linux-gnu/libgsl.so \
/lib/x86_64-linux-gnu/libgsl.a \
/lib/libgsl.a \
/lib/libgsl.so \
/lib64/libgsl.a \
/lib64/libgsl.so \
/sw/lib/libgsl.a \
/sw/lib/libgsl.dylib \
/opt/local/lib/libgsl.a \
/opt/local/lib/libgsl.dylib \
/usr/sfw/lib/libgsl.a \
/usr/sfw/lib/libgsl.so )))

ifneq ($(SYSGSL), 0)
GSLLIB = 
SYS_GSLLIB = gsl gslcblas
else

#No GSL library found. Build without it.
GSLLIB = 
SYS_GSLLIB = 
endif
endif
ifeq ($(SHARED_LIBRARIES), YES)
SYS_GSLLIB_SHARED = $(SYS_GSLLIB)
else
SYS_GSLLIB_SHARED =
endif

# meschach library is required for all methods because of the general matrix
# operations, such as allocating and freeing memory.
ifdef WIN32
PROD_LIBS_WIN32 = mdbcommon rpnlib SDDS1 mdbmth mdblib meschach z fdlibm lzma
endif
PROD_LIBS_BORLANDC = mdbcommon rpnlib SDDS1 mdbmth mdblib meschach z fdlibm lzma
PROD_LIBS_DEFAULT = mdbcommon matlib fftpack rpnlib SDDS1 rpnlib mdbmth mdblib meschach lzma
SYS_PROD_LIBS_DEFAULT = z $(SYS_GSLLIB_SHARED)
SYS_PROD_LIBS_Linux = z $(SYS_GSLLIB_SHARED)
SYS_PROD_LIBS_solaris = z
SYS_PROD_LIBS_WIN32 = -nil-
SYS_PROD_LIBS_BORLANDC = -nil-



sddsmatrixop_LIBS = rpnlib $(GSLLIB)
sddsmatrixop_SYS_LIBS += $(SYS_GSLLIB)

z_DIR = $(INSTALL_LIB)
SDDS1_DIR = $(INSTALL_LIB)
rpnlib_DIR = $(INSTALL_LIB)
meschach_DIR = $(INSTALL_LIB)
mdblib_DIR = $(INSTALL_LIB)
mdbcommon_DIR = $(INSTALL_LIB)
mdbmth_DIR = $(INSTALL_LIB)
matlib_DIR = $(INSTALL_LIB)
fftpack_DIR = $(INSTALL_LIB)
fdlibm_DIR = $(INSTALL_LIB)
lzma_DIR = $(INSTALL_LIB)
